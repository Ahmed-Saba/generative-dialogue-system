############################################################
# Application Environment
############################################################
# ENV specifies the current running environment of the application.
#
# Acceptable values:
#   - development: Local development mode (default)
#   - staging:     Pre-production environment for final testing
#   - production:  Live deployed environment with real users
#
# Effects:
#   - Affects how certain features behave (e.g., logging, error reporting, debugging).
#   - Used in logging configuration to control what handlers or formatters are used.
#
# Recommendation:
#   - Set to "development" when working locally.
#   - Set to "production" in deployed environments to enable stricter behavior.
ENV=development

############################################################
# PostgreSQL Configuration
############################################################
POSTGRES_DRIVER=psycopg
POSTGRES_USERNAME=postgres
POSTGRES_PASSWORD=postgresql_admin_123456
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=gds_db

############################################################
# Test Database Configuration
############################################################
# Trigger testing mode in the app
TESTING=true

# Separate test database used during testing
TEST_POSTGRES_DB="test_gds_db"

# What values should ENV and TESTING have during tests?
# | Variable    | Value during tests                     | Explanation                                                                                                                                                                                                                   |
# | ----------- | -------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
# | **ENV**     | `"test"` or `"development"` (optional) | This variable is mainly for app environment awareness (like logging config). You can set it to `"test"` or `"development"` when running tests. Usually `"development"` is fine unless you want custom behavior for tests.     |
# | **TESTING** | `true`                                 | This is the *key* flag that tells your app you’re running tests. When `TESTING=true`, your `settings.py` switches to the test database (`TEST_POSTGRES_DB`) instead of the production DB, preventing accidental data changes. |

############################################################
# SQLAlchemy Configuration
############################################################
# SQLALCHEMY_ECHO enables logging of all raw SQL statements generated by SQLAlchemy.
#
# Acceptable values:
#   - true / 1 / yes: Logs every SQL query sent to the database (very verbose).
#   - false / 0 / no: Disables SQL query logging (default).
#
# Effects:
#   - true: Useful for debugging and optimizing database interactions.
#            Can produce a large volume of logs and potentially expose sensitive data.
#   - false: Keeps logs cleaner and improves performance.
#
# Recommendation:
#   - Enable (true) during development or troubleshooting.
#   - Disable (false) in production environments to reduce noise.
SQLALCHEMY_ECHO=false

############################################################
# Logging Configuration
############################################################
# LOG_LEVEL sets the minimum severity of log messages that will be recorded.
#
# Acceptable values (case-insensitive):
#   - DEBUG:   Logs everything. Most verbose. Useful during local development and debugging.
#   - INFO:    Logs general application events (default).
#   - WARNING: Logs potentially problematic situations.
#   - ERROR:   Logs errors that prevent some operations.
#   - CRITICAL: Logs critical errors that may crash the app.
#
# Effects:
#   - A lower level like DEBUG will include more logs.
#   - A higher level like ERROR will reduce log volume.
#
# Recommendation:
#   - Use DEBUG in local/dev environments to get more insight.
#   - Use INFO or WARNING in production for a balance of visibility and noise.
#
LOG_LEVEL=INFO

# LOG_FORMAT defines the structure of your application's logs.
# 
# Acceptable values:
#   - "json": Outputs logs in structured JSON format, which is ideal for log aggregation tools
#             like ELK Stack (Elasticsearch, Logstash, Kibana), Fluentd, or CloudWatch.
#   - "text" or "plain": Outputs logs in a human-readable format, useful during local development.
#
# Recommendation:
#   - Use "json" in production environments with centralized logging.
#   - Use "text" in development for easier readability.
LOG_FORMAT=json

# LOG_TO_STDOUT controls whether logs are written to the console (standard output) or to files.
#
# Acceptable values (all are case-insensitive):
#   - true / 1 / yes: Logs are printed to stdout (e.g., visible in Docker logs or cloud logs).
#   - false / 0 / no: Logs are saved to rotating log files on disk (see LOG_DIR).
#
# Effects:
#   - true: Useful in containerized environments (Docker, Kubernetes) where logs are collected via stdout.
#   - false: Useful when you want persistent log files saved on disk.
#
# Recommendation:
#   - Use "true" in containers or cloud deployments.
#   - Use "false" if running locally without centralized log capture.
LOG_TO_STDOUT=true

# LOG_DIR specifies the directory path where log files are stored,
# only if LOG_TO_STDOUT=false (i.e., when logging to files).
#
# Example:
#   LOG_DIR=/var/log/myapp
#
# Notes:
#   - The directory must exist and be writable by the application.
#   - Ignored if LOG_TO_STDOUT=true.
LOG_DIR=/var/log/gds

# LOG_MAX_BYTES defines the maximum size (in bytes) of a single log file
# before it gets rotated (i.e., archived and a new log file is created).
#
# Example:
#   - 10000000 = 10 MB
#
# Effects:
#   - When a log file reaches this size, it's renamed (e.g., app.log.1),
#     and a new log file starts.
#
# Recommendation:
#   - Tune this based on disk space and how much logging your app does.
LOG_MAX_BYTES=10000000  # 10 MB

# LOG_BACKUP_COUNT determines how many old rotated log files are kept.
#
# Example:
#   - 5 → The system keeps 5 archived logs (e.g., app.log.1 to app.log.5),
#         then deletes the oldest one when rotating again.
#
# Recommendation:
#   - Set this high if you need to retain logs for auditing or debugging.
#   - Lower it to save disk space in constrained environments.
LOG_BACKUP_COUNT=5

# ENABLE_SQL_LOGGING controls whether SQLAlchemy will log all SQL queries executed.
#
# Acceptable values:
#   - true / 1 / yes: SQL statements are logged.
#   - false / 0 / no: SQL statements are not logged.
#
# Effects:
#   - true: Helps with debugging database queries and performance issues.
#           WARNING: Can produce a large volume of logs and expose sensitive query info.
#   - false: Keeps logs cleaner and improves performance slightly.
#
# Recommendation:
#   - Use "true" in development or debugging sessions.
#   - Use "false" in production to avoid noise and potential security risks.
ENABLE_SQL_LOGGING=true

# SENTRY_DSN is the connection string for Sentry error tracking.
#
# Acceptable values:
#   - A full Sentry DSN URL (e.g., https://<key>@o123456.ingest.sentry.io/1234567)
#   - Empty (no error reporting)
#
# Effects:
#   - If set, uncaught exceptions and errors will be reported to Sentry.
#   - If empty, Sentry integration is disabled.
#
# Recommendation:
#   - Set this only in production or staging environments.
#   - Leave empty in development/local environments.
#
SENTRY_DSN=
